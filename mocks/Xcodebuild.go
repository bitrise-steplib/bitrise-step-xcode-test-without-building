// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	"github.com/bitrise-io/go-xcode/v2/destination"
	"github.com/stretchr/testify/mock"
)

// Xcodebuild is an autogenerated mock type for the Xcodebuild type
type Xcodebuild struct {
	mock.Mock
}

// TestWithoutBuilding provides a mock function with given fields: xctestrun, onlyTesting, skipTesting, _a3, testRepetitionMode, maximumTestRepetitions, relaunchTestsForEachRepetition, options
func (_m *Xcodebuild) TestWithoutBuilding(xctestrun string, onlyTesting []string, skipTesting []string, _a3 destination.Device, testRepetitionMode string, maximumTestRepetitions int, relaunchTestsForEachRepetition bool, options ...string) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, xctestrun, onlyTesting, skipTesting, _a3, testRepetitionMode, maximumTestRepetitions, relaunchTestsForEachRepetition)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestWithoutBuilding")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, []string, destination.Device, string, int, bool, ...string) (string, error)); ok {
		return rf(xctestrun, onlyTesting, skipTesting, _a3, testRepetitionMode, maximumTestRepetitions, relaunchTestsForEachRepetition, options...)
	}
	if rf, ok := ret.Get(0).(func(string, []string, []string, destination.Device, string, int, bool, ...string) string); ok {
		r0 = rf(xctestrun, onlyTesting, skipTesting, _a3, testRepetitionMode, maximumTestRepetitions, relaunchTestsForEachRepetition, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, []string, []string, destination.Device, string, int, bool, ...string) error); ok {
		r1 = rf(xctestrun, onlyTesting, skipTesting, _a3, testRepetitionMode, maximumTestRepetitions, relaunchTestsForEachRepetition, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewXcodebuild creates a new instance of Xcodebuild. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXcodebuild(t interface {
	mock.TestingT
	Cleanup(func())
}) *Xcodebuild {
	mock := &Xcodebuild{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
